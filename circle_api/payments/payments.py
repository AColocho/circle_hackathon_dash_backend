from fastapi import APIRouter
from pydantic import BaseModel
from .logic import Connect

connect = Connect()

router = APIRouter(prefix='/payments', tags=['payments'])

class BillingDetails(BaseModel):
    name:str
    address_1:str
    address_2:str = None
    city:str
    state:str
    zipcode:str
    country:str = 'US'

class MetaData(BaseModel):
    email:str
    phone:str
    session_id:str
    address_ip:str

@router.get('/public_key')
async def get_public_key():
    """
    Generates public key to encrypt card data
    """
    return connect.get_public_key()

class Card(BillingDetails, MetaData, BaseModel):
    encrypted_data:str
    exp_month:int
    exp_year:int
    amount:float
    currency:str = 'USD'
    description:str
        
@router.post('/pay_card')
def pay_card(card_details:Card):
    """
    Make card payment. \n
    phone - must be in +countryCodeArea_codePhone format (+17033004000) \n
    state - Two letter code
    """
    return connect.pay_card(card_details)

class ACH(BillingDetails, MetaData, BaseModel):
    routing:int = 1
    account:int = 1
    amount:float
    currency:str = 'USD'
    description:str

@router.post('/pay_ach')
def pay_ach(ach:ACH):
    """
    Make ACH payment.\n
    phone - must be in +countryCodeArea_codePhone format (+17033004000)\n
    state - Two letter code
    """
    return connect.pay_ach(ach)

class Wallet(BaseModel):
    source_wallet_id:str
    amount:str
    currency:str = 'USD'

@router.post('/pay_blockchain')
def pay_blockchain(wallet:Wallet):
    """
    source_wallet_id - User wallet that has been previously generated by user
    """
    return connect.pay_blockchain(wallet)